syntax = "proto3";
package bos;

// option sysmod_package = "github.com/jamesryancoleman/bos/services/sysmod";
// option go_package = "github.com/jamesryancoleman/bos/services/device";

// import "google/protobuf/empty.proto";

message Empty{} 

// Headers are used to track from what service or app a request is made and 
// from which service a response is returned.
message Header {
    string Src = 1;
    string Dst = 2;

    uint64 TxId = 3;
}

// GetPairs are returned by services when get requests are made
message GetPair {
    string Key = 1;
    string Value = 2;
    optional Dtype Dtype = 3;

    optional GetError Error = 5; // is this the right error type?
    optional string ErrorMsg = 6;
}

// SetPairs are returned by services when set requests are made
message SetPair {
    // used in requests
    string Key = 1;
    string Value = 2;

    // used in responses
    optional Dtype Dtype = 3;
    
    bool Ok = 4;

    optional SetError Error = 5; // is this the right error type?
    optional string ErrorMsg = 6;
}

message GetRequest {
    Header Header = 1; 
    repeated string Keys = 2;
}

message GetResponse {
    optional Header Header = 1;
    repeated GetPair Pairs = 2;

    optional ServiceError Error = 3;
    optional string ErrorMsg = 4;
}

message SetRequest {
    optional Header Header = 1;
    repeated SetPair Pairs = 2;
}

message SetResponse {
    optional Header Header = 1;
    repeated SetPair Pairs = 2;

    optional ServiceError Error = 3;
    optional string ErrorMsg = 4;
}

enum ServiceError {
    SERVICE_ERROR_NONE = 0;
    SERVICE_ERROR_UNSPECIFIED = 1;
    SERVICE_ERROR_NO_RESPONSE = 2;
    SERVICE_ERROR_TIMEOUT = 3;

    SERVICE_ERROR_ACCESS_DENIED = 7;
}

enum GetError {
    GET_ERROR_NONE = 0;
    GET_ERROR_UNSPECIFIED = 1;
    GET_ERROR_KEY_DOES_NOT_EXIST = 2;
    GET_ERROR_TIMEOUT = 3;
    GET_ERROR_COULD_NOT_RESOLVE_DRIVER = 4;
    GET_ERROR_COULD_NOT_RESOLVE_ADDR = 5;
    GET_ERROR_COULD_NOT_RESOLVE_XREF = 6;
    GET_ERROR_ACCESS_DENIED = 7;
}
           
// the GetSetRun service provides the fundamental driver functionality for Setting 
// values, getting them, and running commands.
service GetSetRun {
    // rpc for getting a value from a driver
    rpc Get(GetRequest) returns (GetResponse);
    
    // rpc for setting a value on a driver
    rpc Set(SetRequest) returns (SetResponse);
}

enum SetError {
    SET_ERROR_NONE = 0;
    SET_ERROR_UNSPECIFIED = 1;
    SET_ERROR_KEY_DOES_NOT_EXIST = 2;
    SET_ERROR_TIMEOUT = 3;
    SET_ERROR_COULD_NOT_RESOLVE_DRIVER = 4;
    SET_ERROR_COULD_NOT_RESOLVE_ADDR = 5;
    SET_ERROR_COULD_NOT_RESOLVE_XREF = 6;
    SET_ERROR_ACCESS_DENIED = 7;
    SET_ERROR_READ_ONLY = 8;
    SET_ERROR_INVALID_VALUE_TYPE = 9;
}

// the sysmod service
message PointQueryRequest {
    optional Header Header = 1;

    optional string Query = 2;

    optional string Device = 3; // "5", "dev:5", "bos://localhost/bos/dev/5"
    repeated string Names = 4;
    repeated string Types = 5;
    repeated string Locations = 6;
    optional bool ConsiderDeviceLoc = 7; 
    optional Dtype Resource = 8; // 30, 40 or 48

    optional QueryError Error = 11;
    optional string ErrorMsg = 12;
}

message QueryResponse {
    optional Header Header = 1;
    optional string Query = 2; // should this be optional?
    repeated string Values = 3;
    optional Dtype Dtype = 4;
    optional QueryError Error = 5;
    optional string ErrorMsg = 6;
}

// the PointId (pid) service takes classes, names, or regexes
service Sysmod {
    // Key are the point names. Response is POINT_ID or POINT_ID_LIST
    rpc NameToPoint(GetRequest) returns (QueryResponse);
    rpc PointToName(GetRequest) returns (QueryResponse);

    // Key are the class. Response is POINT_ID or POINT_ID_LIST
    rpc TypeToPoint(GetRequest) returns (QueryResponse);

    // Key is the location. Response is POINT_ID or POINT_ID_LIST
    rpc LocationToPoint(GetRequest) returns (QueryResponse);

    // Takes a set of query params. Response is POINT_ID or POINT_ID_LIST
    rpc QueryPoints(PointQueryRequest) returns (QueryResponse);

    // Takes a bos:Point. Returns the bos:xref of the corresponding driver 
    rpc GetDriverXref(GetRequest) returns(QueryResponse);
}

enum QueryError {
    QUERY_ERROR_NONE = 0;
    QUERY_ERROR_UNSPECIFIED = 1;
    // GET_ERROR_KEY_DOES_NOT_EXIST = 2;
    QUERY_ERROR_TIMEOUT = 3;
    QUERY_ERROR_UNKNOWN_PREFIX = 4;
    QUERY_ERROR_ACCESS_DENIED = 5;
}                
                
// Values are returned as strings. Dtype is used to decode to data types.
enum Dtype {
    UNSPECIFIED = 0;
    
    NULL = 1;

    DOUBLE = 10; // float64
    FLOAT = 11;  // float32
    INT32 = 12;  // int32
    INT64 = 13;  // int64
    UINT32 = 14;
    UINT64 = 15;
    SINT32 = 16;
    SINT64 = 17;
    FIXED32 = 18;
    FIXED64 = 19;
    SFIXED32 = 20;
    SFIXED64 = 21;
    BOOL = 22;
    STRING = 23;
    BYTES = 24;


    // sysmod response types
    POINT = 30; // e.g., "bos://localhost/bos/dev/5/pts/1"
    POINT_LIST = 31; // e.g., "bos://localhost/bos/dev/5/pts/1 bos://localhost/bos/dev/6/pts/1"

    DEVICE = 40;
    DEVICE_LIST = 41;

    DRIVER = 48;
    DRIVER_XREF = 49;
}

service HealthCheck {
    rpc Ping(Empty) returns (Empty);
}

          
// message GetResponse {
//     optional Header Header = 1;
//     string Key = 2;
//     string Value = 3;
//     optional Dtype Dtype = 4;
//     optional GetError Error = 5;
//     optional string ErrorMsg = 6;
// }


// message GetMultipleRequest {
//     Header Header = 1;
//     repeated string Keys = 2;
// }

// message GetMultipleResponse {
//     Header Header = 1;
//     repeated GetResponse Responses = 2;
// }

// message SetMultipleRequest {
//     Header Header = 1;
//     repeated SetRequest Requests = 2;
// }

// message SetMultipleResponse {
//     Header Header = 1;
//     repeated SetResponse Responses = 2;
// }


/* 

For python compiling:

python -m grpc_tools.protoc  -I=. \
--python_out=drivers/bacnet/      \
--pyi_out=drivers/bacnet/         \
--grpc_python_out=drivers/bacnet/ \
device.proto

python -m grpc_tools.protoc  -I=. \
--python_out=drivers/grpc-example/      \
--pyi_out=drivers/grpc-example/         \
--grpc_python_out=drivers/grpc-example/ \
device.proto 

python -m grpc_tools.protoc  -I=. \
--python_out=drivers/kasa/      \
--pyi_out=drivers/kasa/         \
--grpc_python_out=drivers/kasa/ \
device.proto 

For Go compiling:

protoc -I=. \
--go_out=. --go_opt=paths=source_relative \
--go-grpc_out=. --go-grpc_opt=paths=source_relative \
./device.proto &&
protoc --proto_path=. \
--go_out=. --go_opt=paths=source_relative \
--go-grpc_out=. --go-grpc_opt=paths=source_relative \
./device.proto

// message PointId {
    //     uint32 Device = 1;
    //     uint32 Point = 2;
    // }
    
    // message RunRequest {
        //     Header Header = 1;
        //     string Method = 2;
        //     repeated string Args = 3;
        //     uint32 Device = 4;
        // }
        
        // message RunResponse {
            //     Header Header = 1;
            //     bool Ok = 2;
            //     RunError Error = 3;
            //     repeated string Values = 4;
            // }
            

*/

// message FieldMsg {
//     string Name = 1;
//     optional Dtype Type = 2;
// }

// message FieldList {
//     repeated FieldMsg Fields = 1;
// }

// message MethodSignature {
//     string Name = 1;
//     repeated Dtype ArgTypes = 2;
//     repeated Dtype ReturnTypes = 3;
// }

// message MethodList {
//     repeated MethodSignature Signatures = 1;
// }

// message BosPoint {
//     uint32 Device = 1;
//     uint32 Point = 2;
// }

// message Socket {
//     string Host = 1;
//     int32 Port = 2;
// }

// // the DeviceDaemon service provides the api to userspace
// service DeviceDaemon {
    //     // rpc for userspace apps to request a point's current value
    //     rpc GetPoint(PBPoint) returns (GetResponse);
    //     // rpc for userspace apps to set a point's current value
    //     rpc SetPoint(PBPoint) returns (SetResponse);
    //     // rpc for userspace apps to trigger a command exposed by a device
    //     rpc RunCmd(RunRequest) returns (RunResponse);
    // }
             